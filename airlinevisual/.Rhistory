df %>% fill(Year)
## 针对人口数据，使用前一个值来填补缺失值
GPLRdata <- GPLRdata%>%group_by(Country, Year)%>%
arrange(.by_group = TRUE) %>%
mutate(Number = na.locf(Number))
library(zoo)
## 针对人口数据，使用前一个值来填补缺失值
GPLRdata <- GPLRdata%>%group_by(Country, Year)%>%
arrange(.by_group = TRUE) %>%
mutate(Number = na.locf(Number))
colnames(GPLRdata)
## 针对人口数据，使用前一个值来填补缺失值
GPLRdata <- GPLRdata%>%group_by(Country, Year)%>%
arrange(.by_group = TRUE) %>%
mutate(Number2 = na.locf(Number))
data.frame(col1 = c(1,2,3,4,5), col2  = c("a", NA, NA , "b", NA), col3 = c("A", NA, "B", NA, NA)) %>%
mutate(col2 = na.locf(col2))
## 针对人口数据，使用前一个值来填补缺失值
GPLRdata <- GPLRdata%>%group_by(Country, Year)%>%
arrange(.by_group = TRUE) %>%
data.frame()%>%
mutate(Number2 = na.locf(Number))
plotdata <- GPLRdata[GPLRdata$Year== 1801,]
View(plotdata)
colnames(plotdata)
ggplot(plotdata,aes(x=income,y=life,fill=Region,size=Number2 / 10e8))+
theme_bw()+
geom_point()
ggplot(plotdata,aes(x=income,y=life,fill=Region,size=Number2 / 10e7))+
theme_bw()+
geom_point()
ggplot(plotdata,aes(x=income,y=life,group=Region,size=Number2 / 10e7))+
theme_bw()+
geom_point()
ggplot(plotdata,aes(x=income,y=life,fill=Region,size=Number2 / 10e7))+
theme_bw()+
geom_point()
ggplot(plotdata,aes(x=income,y=life,colour=Region,size=Number2 / 10e7))+
theme_bw()+
geom_point()
ggplot(plotdata,aes(x=income,y=life,colour=Region,size=Number2 / 10e7))+
theme_bw()+
geom_point()+
scale_fill_gradientn(colours=rev(brewer.pal(7,"RdYlGn")))+
library(RColorBrewer)
library(RColorBrewer)
ggplot(plotdata,aes(x=income,y=life,colour=Region,size=Number2 / 10e7))+
theme_bw()+
geom_point()+
scale_fill_gradientn(colours=rev(brewer.pal(7,"RdYlGn")))
ggplot(plotdata,aes(x=income,y=life,colour=Region,size=Number2 / 10e7))+
theme_bw()+
geom_point()+
scale_color_gradientn(colours=rev(brewer.pal(7,"RdYlGn")))
ggplot(plotdata,aes(x=income,y=life,colour=Region,size=Number2 / 10e7))+
theme_bw()+
geom_point()+
scale_color_gradient(colours=rev(brewer.pal(7,"RdYlGn")))
ggplot(plotdata,aes(x=income,y=life,colour=Region,size=Number2 / 10e7))+
theme_bw()+
geom_point()+
scale_color_brewer(colours=rev(brewer.pal(7,"RdYlGn")))
ggplot(plotdata,aes(x=income,y=life,colour=Region,size=Number2 / 10e7))+
theme_bw()+
geom_point()+
scale_color_brewer(palette="RdYlGn")
ggplot(plotdata,aes(x=income,y=life,colour=Region,size=Number2 / 10e7))+
theme_bw()+
geom_point()+
scale_color_brewer(palette="Spectral")
ggplot(plotdata,aes(x=income,y=life,colour=Region,size=Number2 / 10e7))+
theme_bw()+
geom_point()+
scale_color_gradient(palette="Spectral")
ggplot(plotdata,aes(x=income,y=life,colour=Region,size=Number2 / 10e7))+
theme_bw()+
geom_point()+
scale_color_gradient(low = "#132B43", high = "#56B1F7")
ggplot(plotdata,aes(x=income,y=life,colour=Region,size=Number2 / 10e7))+
theme_bw()+
geom_point()+
scale_color_gradientn(low = "#132B43", high = "#56B1F7")
ggplot(plotdata,aes(x=income,y=life,colour=Region,size=Number2 / 10e7))+
theme_bw()+
geom_point()+
scale_color_gradientn(colours=rev(brewer.pal(10,"RdYlGn")))
ggplot(plotdata,aes(x=income,y=life,colour=Region,size=Number2 / 10e7))+
theme_bw()+
geom_point()+
scale_color_gradientn(colours=rev(brewer.pal(Set1)))
ggplot(plotdata,aes(x=income,y=life,colour=Region,size=Number2 / 10e7))+
theme_bw()+
geom_point()+
scale_color_gradientn(colours=brewer.pal(Set1))
ggplot(plotdata,aes(x=income,y=life,colour=Region,size=Number2 / 10e7))+
theme_bw()+
geom_point()
ggplot(plotdata,aes(x=income,y=life,colour=Region,size=Number2 / 10e7))+
theme_bw()+
geom_point()+
scale_color_discrete()
ggplot(plotdata,aes(x=income,y=life,colour=Region,size=Number2 / 10e7))+
theme_bw()+
geom_point()+
scale_color_brewer(palette = 1)
ggplot(plotdata,aes(x=income,y=life,colour=Region,size=Number2 / 10e7))+
theme_bw()+
geom_point()+
scale_color_brewer(palette = 2)
ggplot(plotdata,aes(x=income,y=life,colour=Region,size=Number2 / 10e7))+
theme_bw()+
geom_point()+
scale_color_brewer(palette = "Set1")
ggplot(plotdata,aes(x=income,y=life,colour=Region,size=Number2 / 10e7))+
theme_bw()+
geom_point()+
scale_color_brewer(palette = "Set2")
ggplot(plotdata,aes(x=income,y=life,colour=Region,size=Number2 / 10e7))+
theme_bw()+
geom_point()+
scale_color_brewer(palette = "Set3")
ggplot(plotdata,aes(x=income,y=life,colour=Region,size=Number2 / 10e7))+
theme_bw()+
geom_point()+
scale_color_brewer(palette = "Pastel2")
ggplot(plotdata,aes(x=income,y=life,colour=Region,size=Number2 / 10e7))+
theme_bw()+
geom_point()+
scale_color_brewer(palette = "Pastel1")
ggplot(plotdata,aes(x=income,y=life,colour=Region,size=Number2 / 10e7))+
theme_bw()+
geom_point()+
scale_color_brewer(palette = "Set1")
ggplot(plotdata,aes(x=income,y=life,colour=Region,size=Number2 / 10e6))+
theme_bw()+
geom_point()+
scale_color_brewer(palette = "Set1")
ggplot(plotdata,aes(x=income,y=life,colour=Region,size=Number2 / 10e8))+
theme_bw()+
geom_point()+
scale_color_brewer(palette = "Set1")
ggplot(plotdata,aes(x=income,y=life,colour=Region,size=Number2 / 1e8))+
theme_bw()+
geom_point()+
scale_color_brewer(palette = "Set1")
ggplot(GPLRdata,aes(x=income,y=life,colour=Region,size=Number2 / 1e8))+
theme_bw()+
geom_point()+
scale_color_brewer(palette = "Set1")+
transition_time(Year) +
labs(title = 'Year: {frame_time}')
ggplot(GPLRdata,aes(x=income,y=life,colour=Region,size=Number2 / 1e8))+
theme_bw()+
geom_point(na.rm = TRUE)+
scale_color_brewer(palette = "Set1")+
transition_time(Year) +
labs(title = "Year: {frame_time}")+
ease_aes("linear")
ggplot(plotdata,aes(x=income,y=life,colour=Region,size=Number2 / 1e8))+
theme_bw()+
geom_point()+
scale_color_brewer(palette = "Set1")+
theme(legend.position = "bottom")
ggplot(GPLRdata,aes(x=income,y=life,colour=Region,size=Number2 / 1e8))+
theme_bw()+
geom_point(na.rm = TRUE)+
scale_color_brewer(palette = "Set1")+
theme(legend.position = "bottom")+
transition_time(Year) +
labs(title = "Year: {frame_time}")+
ease_aes("elastic-in")
ggplot(plotdata,aes(x=income,y=life,colour=Region,size=Number2 / 1e7))+
theme_bw()+
geom_point()+
scale_color_brewer(palette = "Set1")+
theme(legend.position = "bottom")
ggplot(plotdata,aes(x=income,y=life,colour=Region))+
theme_bw()+
geom_point(aes(size=Number2 / 1e7))+
scale_color_brewer(palette = "Set1")+
theme(legend.position = "bottom")
ggplot(plotdata,aes(x=income,y=life,colour=Region))+
theme_bw()+
geom_point(aes(size=2*Number2 / 1e7))+
scale_color_brewer(palette = "Set1")+
theme(legend.position = "bottom")
plotdata <- GPLRdata[GPLRdata$Year== 2001,]
ggplot(plotdata,aes(x=income,y=life,colour=Region))+
theme_bw()+
geom_point(aes(size=Number2 / 1e7))+
scale_color_brewer(palette = "Set1")+
theme(legend.position = "bottom")
ggplot(plotdata,aes(x=income,y=life,colour=Region))+
theme_bw()+
geom_point(aes(size=Number2 / 1e8))+
scale_color_brewer(palette = "Set1")+
theme(legend.position = "bottom")
ggplot(plotdata,aes(x=income,y=life,colour=Region))+
theme_bw()+
geom_point(aes(size=Number2 / 1e8),alpha = 0.7)+
scale_color_brewer(palette = "Set1")+
theme(legend.position = "bottom")
ggplot(plotdata,aes(x=income,y=life,colour=Region))+
theme_bw()+
geom_point(aes(size=Number2 / 1e8),alpha = 0.8)+
scale_color_brewer(palette = "Set1")+
theme(legend.position = "bottom")
ggplot(plotdata,aes(x=income,y=life,colour=Region))+
theme_bw()+
geom_point(aes(size=Number2 / 1e8),alpha = 0.8)+
scale_color_brewer(palette = "Set1")+
facet_wrap(.~Region)+
theme(legend.position = "bottom")
ggplot(GPLRdata,aes(x=income,y=life,colour=Region,size=Number2 / 1e8))+
theme_bw()+
geom_point(na.rm = TRUE)+
scale_color_brewer(palette = "Set1",legend = FALSE)+
facet_wrap(.~Regio)
ggplot(GPLRdata,aes(x=income,y=life,colour=Region,size=Number2 / 1e8))+
theme_bw()+
geom_point(na.rm = TRUE)+
scale_color_brewer(palette = "Set1",show.legend = FALSE)+
facet_wrap(.~Regio)
ggplot(GPLRdata,aes(x=income,y=life,colour=Region,size=Number2 / 1e8))+
theme_bw()+
geom_point(na.rm = TRUE,show.legend = FALSE)+
scale_color_brewer(palette = "Set1")+
facet_wrap(.~Regio)
ggplot(GPLRdata,aes(x=income,y=life,colour=Region,size=Number2 / 1e8))+
theme_bw()+
geom_point(na.rm = TRUE,show.legend = FALSE)+
scale_color_brewer(palette = "Set1")+
facet_wrap(.~Regiin)
ggplot(GPLRdata,aes(x=income,y=life,colour=Region,size=Number2 / 1e8))+
theme_bw()+
geom_point(na.rm = TRUE,show.legend = FALSE)+
scale_color_brewer(palette = "Set1")+
facet_wrap(.~Regiin)+
transition_time(Year) +
labs(title = "Year: {frame_time}")+
ease_aes("linear")
ggplot(GPLRdata,aes(x=income,y=life,colour=Region,size=Number2 / 1e8))+
theme_bw()+
geom_point(na.rm = TRUE,show.legend = FALSE)+
scale_color_brewer(palette = "Set1")+
facet_wrap(.~Region)+
transition_time(Year) +
labs(title = "Year: {frame_time}")+
ease_aes("linear")
## 加载库
library(ggplot2)
library(dplyr)
library(tidyr)
library(RColorBrewer)
library(maps)
library(geosphere)
library(igraph)
library(networkD3)
library(stringr)
## 读取数据，数据融合
routes <- read.csv("routes.csv",header=TRUE)
airports <- read.csv("airports.csv",header=TRUE)
map(database = "world",col="skyblue", fill=TRUE, bg="black", lwd=0.1)
# 添加起点的位置
points(x=airports$Longitude, y=airports$Latitude, pch=19, cex=0.2,col="orange")
##  数据准别
airportusa <- airports[airports$Country == "United States",]
index <- ((plotdata4$source.airport %in% airportusa$IATA)&
(plotdata4$destination.apirport %in% airportusa$IATA))
### 可视化每个国家有多少机场
plotdata <- airports%>%group_by(Country)%>%
summarise(number = n(),
LatitudeMean = mean(Latitude),
LongitudeMean = mean(Longitude))
## 在地图上可视化每个国家的机场数量
map(database = "world",col="skyblue", fill=TRUE, bg="black", lwd=0.1)
# 添加起点的位置
points(x=plotdata$LongitudeMean, y=plotdata$LatitudeMean,
pch=19, cex=log10(plotdata$number),col="orange")
data.frame(table(airports$Country)) %>%
arrange(desc(Freq)) %>%
head(20) %>%
ggplot(aes(x = reorder(Var1, -Freq), y = Freq, fill = Var1, label = Freq)) +
theme_bw(base_family = "STKaiti")+
geom_bar(stat = "identity", show.legend = FALSE) +
labs(title = "机场最多的20个国家", x="",y = "机场数量") +
geom_label(angle = 45, show.legend = FALSE,size=3) +
theme(axis.text.x = element_text(angle = 40, size = 10),
plot.title = element_text(hjust = 0.5))
##  数据组合
plotdata <- routes[c("source.airport","destination.apirport")]
## 剔除缺失值
plotdata <- plotdata[!is.na(plotdata[,1])&!is.na(plotdata[,2]),]
plotdata2 <- airports[c("IATA","Latitude","Longitude")]
plotdata3 <- merge(plotdata,plotdata2,by.x = "source.airport", by.y = "IATA")
plotdata4 <- merge(plotdata3,plotdata2,by.x = "destination.apirport", by.y = "IATA")
## 可视化航线
map(database = "world",col="skyblue", fill=TRUE, bg="black", lwd=0.1)
# 添加起点的位置
points(x=airports$Longitude, y=airports$Latitude, pch=19, cex=0.2,col="orange red")
col.1 <- adjustcolor("orange", alpha=0.4)
for(i in 1:nrow(plotdata4)) {
node1 <- plotdata4[i,c("Latitude.x","Longitude.x")]
node2 <- plotdata4[i,c("Latitude.y","Longitude.y")]
arc <- gcIntermediate( c(node1$Longitude.x, node1$Latitude.x),
c(node2$Longitude.y, node2$Latitude.y),
n=100, addStartEnd=TRUE )
lines(arc, col=col.1, lwd=0.1)
}
##  数据准别
airportusa <- airports[airports$Country == "United States",]
index <- ((plotdata4$source.airport %in% airportusa$IATA)&
(plotdata4$destination.apirport %in% airportusa$IATA))
plotdata4usa <- plotdata4[index,]
map("state",col="palegreen", fill=TRUE, bg="black", lwd=0.1)
# 添加起点的位置
points(x=airportusa$Longitude, y=airportusa$Latitude, pch=19, cex=0.4,col="orange")
col.1 <- adjustcolor("tomato", alpha=0.4)
## 添加边
for(i in 1:nrow(plotdata4usa)) {
node1 <- plotdata4usa[i,c("Latitude.x","Longitude.x")]
node2 <- plotdata4usa[i,c("Latitude.y","Longitude.y")]
arc <- gcIntermediate( c(node1$Longitude.x, node1$Latitude.x),
c(node2$Longitude.y, node2$Latitude.y),
n=1000, addStartEnd=TRUE )
lines(arc, col=col.1, lwd=0.2)
}
View(plotdata4usa)
write.csv(plotdata4usa,"usaairline.csv",row.names = F)
## 读取数据，数据融合
routes <- read.csv("routes.csv",header=TRUE)
airports <- read.csv("airports.csv",header=TRUE)
## 加载库
library(ggplot2)
library(dplyr)
library(tidyr)
library(RColorBrewer)
library(maps)
library(geosphere)
library(igraph)
library(networkD3)
library(stringr)
## 读取数据，数据融合
routes <- read.csv("routes.csv",header=TRUE)
airports <- read.csv("airports.csv",header=TRUE)
map(database = "world",col="skyblue", fill=TRUE, bg="black", lwd=0.1)
# 添加起点的位置
points(x=airports$Longitude, y=airports$Latitude, pch=19, cex=0.2,col="orange")
##  数据组合
plotdata <- routes[c("source.airport","destination.apirport")]
## 剔除缺失值
plotdata <- plotdata[!is.na(plotdata[,1])&!is.na(plotdata[,2]),]
plotdata2 <- airports[c("IATA","Latitude","Longitude")]
plotdata3 <- merge(plotdata,plotdata2,by.x = "source.airport", by.y = "IATA")
plotdata3 <- merge(plotdata,plotdata2,by.x = "source.airport", by.y = "IATA")
plotdata4 <- merge(plotdata3,plotdata2,by.x = "destination.apirport", by.y = "IATA")
##  数据准别
airportusa <- airports[airports$Country == "United States",]
index <- ((plotdata4$source.airport %in% airportusa$IATA)&
(plotdata4$destination.apirport %in% airportusa$IATA))
plotdata4usa <- plotdata4[index,]
write.csv(airportusa,"airportusa.csv",row.names = F)
## 加载库
library(ggplot2)
library(dplyr)
library(tidyr)
library(RColorBrewer)
library(maps)
library(geosphere)
library(igraph)
library(networkD3)
library(stringr)
## 读取数据，数据融合
routes <- read.csv("routes.csv",header=TRUE)
airports <- read.csv("airports.csv",header=TRUE)
### 可视化每个国家有多少机场
plotdata <- airports%>%group_by(Country)%>%
summarise(number = n(),
LatitudeMean = mean(Latitude),
LongitudeMean = mean(Longitude))
##  数据组合
plotdata <- routes[c("source.airport","destination.apirport")]
## 剔除缺失值
plotdata <- plotdata[!is.na(plotdata[,1])&!is.na(plotdata[,2]),]
plotdata2 <- airports[c("IATA","Latitude","Longitude")]
plotdata3 <- merge(plotdata,plotdata2,by.x = "source.airport", by.y = "IATA")
plotdata3 <- merge(plotdata,plotdata2,by.x = "source.airport", by.y = "IATA")
plotdata4 <- merge(plotdata3,plotdata2,by.x = "destination.apirport", by.y = "IATA")
##  数据准别
airportusa <- airports[airports$Country == "United States",]
index <- ((plotdata4$source.airport %in% airportusa$IATA)&
(plotdata4$destination.apirport %in% airportusa$IATA))
plotdata4usa <- plotdata4[index,]
##  数据组合
plotdata <- routes[c("source.airport","destination.apirport")]
## 剔除缺失值
plotdata <- plotdata[!is.na(plotdata[,1])&!is.na(plotdata[,2]),]
plotdata2 <- airports[c("IATA","Country","Latitude","Longitude")]
plotdata3 <- merge(plotdata,plotdata2,by.x = "source.airport", by.y = "IATA")
plotdata4 <- merge(plotdata3,plotdata2,by.x = "destination.apirport", by.y = "IATA")
## 计算联系的多少
plotdata5 <- plotdata4%>%group_by(Country.x,Country.y)%>%
summarise(connectnumber = n())%>%
arrange(desc(connectnumber))
plotdata5 <- plotdata5[!(plotdata5$Country.x == plotdata5$Country.y),]
### 国家的位置
plotdataCountry <- airports%>%group_by(Country)%>%
summarise(airportnumber = n(),
LatitudeMean = mean(Latitude),
LongitudeMean = mean(Longitude))
## 连接数据
plotdataall <- merge(plotdata5,plotdataCountry,by.x = "Country.x", by.y = "Country")
plotdataall <- merge(plotdataall,plotdataCountry,by.x = "Country.y", by.y = "Country")
## 国家之间的连接
plotdata <- plotdataall[,c("Country.y","Country.x","connectnumber","airportnumber.x")]
plotdata <- plotdata[plotdata$connectnumber > 50,]
## 机场数量
airportnum <- airports%>%group_by(Country)%>%
summarise(airportnumber = n())
## 定义连接的数据
d <- plotdata[,c("Country.y","Country.x","connectnumber")]
type <- cut_interval(log(d$connectnumber),3)
levels(type) <- 1:3
d$etype <- as.numeric(type)
## 定义节点的属性
nodes <- unique(c(as.character(plotdata$Country.y),as.character(plotdata$Country.x)))
v <- airportnum[airportnum$Country %in%nodes,]
type <- cut_interval(10*log10(v$airportnumber),3)
levels(type) <- 1:3
v$vtype <- as.numeric(type)
View(d)
View(v)
write.csv(d,"edge.csv",row.names = F)
# write.csv(d,"edge.csv",row.names = F)
write.csv(v,"vertex.csv",row.names = F)
## 加载库
library(ggplot2)
library(dplyr)
library(tidyr)
library(RColorBrewer)
library(maps)
library(geosphere)
library(igraph)
library(networkD3)
library(stringr)
## 读取数据，数据融合
routes <- read.csv("routes.csv",header=TRUE)
airports <- read.csv("airports.csv",header=TRUE)
map(database = "world",col="skyblue", fill=TRUE, bg="black", lwd=0.1)
# 添加起点的位置
points(x=airports$Longitude, y=airports$Latitude, pch=19, cex=0.2,col="orange")
### 可视化每个国家有多少机场
plotdata <- airports%>%group_by(Country)%>%
summarise(number = n(),
LatitudeMean = mean(Latitude),
LongitudeMean = mean(Longitude))
## 在地图上可视化每个国家的机场数量
map(database = "world",col="skyblue", fill=TRUE, bg="black", lwd=0.1)
# 添加起点的位置
points(x=plotdata$LongitudeMean, y=plotdata$LatitudeMean,
pch=19, cex=log10(plotdata$number),col="orange")
data.frame(table(airports$Country)) %>%
arrange(desc(Freq)) %>%
head(20) %>%
ggplot(aes(x = reorder(Var1, -Freq), y = Freq, fill = Var1, label = Freq)) +
theme_bw(base_family = "STKaiti")+
geom_bar(stat = "identity", show.legend = FALSE) +
labs(title = "机场最多的20个国家", x="",y = "机场数量") +
geom_label(angle = 45, show.legend = FALSE,size=3) +
theme(axis.text.x = element_text(angle = 40, size = 10),
plot.title = element_text(hjust = 0.5))
##  数据组合
plotdata <- routes[c("source.airport","destination.apirport")]
## 剔除缺失值
plotdata <- plotdata[!is.na(plotdata[,1])&!is.na(plotdata[,2]),]
plotdata2 <- airports[c("IATA","Latitude","Longitude")]
plotdata3 <- merge(plotdata,plotdata2,by.x = "source.airport", by.y = "IATA")
plotdata4 <- merge(plotdata3,plotdata2,by.x = "destination.apirport", by.y = "IATA")
## 可视化航线
map(database = "world",col="skyblue", fill=TRUE, bg="black", lwd=0.1)
# 添加起点的位置
points(x=airports$Longitude, y=airports$Latitude, pch=19, cex=0.2,col="orange red")
col.1 <- adjustcolor("orange", alpha=0.4)
for(i in 1:nrow(plotdata4)) {
node1 <- plotdata4[i,c("Latitude.x","Longitude.x")]
node2 <- plotdata4[i,c("Latitude.y","Longitude.y")]
arc <- gcIntermediate( c(node1$Longitude.x, node1$Latitude.x),
c(node2$Longitude.y, node2$Latitude.y),
n=100, addStartEnd=TRUE )
lines(arc, col=col.1, lwd=0.1)
}
##  数据准别
airportusa <- airports[airports$Country == "United States",]
index <- ((plotdata4$source.airport %in% airportusa$IATA)&
(plotdata4$destination.apirport %in% airportusa$IATA))
plotdata4usa <- plotdata4[index,]
# write.csv(airportusa,"airportusa.csv",row.names = F)
map("state",col="palegreen", fill=TRUE, bg="black", lwd=0.1)
# 添加起点的位置
points(x=airportusa$Longitude, y=airportusa$Latitude, pch=19, cex=0.4,col="orange")
col.1 <- adjustcolor("tomato", alpha=0.4)
## 添加边
for(i in 1:nrow(plotdata4usa)) {
node1 <- plotdata4usa[i,c("Latitude.x","Longitude.x")]
node2 <- plotdata4usa[i,c("Latitude.y","Longitude.y")]
arc <- gcIntermediate( c(node1$Longitude.x, node1$Latitude.x),
c(node2$Longitude.y, node2$Latitude.y),
n=1000, addStartEnd=TRUE )
lines(arc, col=col.1, lwd=0.2)
}
# write.csv(airportusa,"airportusa.csv",row.names = F)
write.csv(plotdata4usa,"airlineusa.csv",row.names = F)
